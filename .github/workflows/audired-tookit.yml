name: Audi RED Toolkit

on:
  workflow_call:
    inputs:
        source_file:
            description: 'Source file from the origin directory'
            required: true
            type: string
        destination_repo:
            description: 'Destination repository'
            type: string
            required: false
            default: 'RED-Internal-Development/audi-red-documentation'
        destination_folder:
            description: 'Directory to push the file to'
            type: string
            required: false
        user_email:
            description: 'Email for the git commit'
            type: string
            required: true
        user_name:
            description: 'GitHub username for the commit'
            type: string
            required: true
        user_actor:
            description: 'GitHub username that trigged the pipeline'
            type: string
            required: true
        destination_branch:
            description: 'branch to push file to, defaults to main'
            type: string
            required: false
        destination_branch_create:
            description: 'Destination branch to create for this commit'
            type: string
            required: false
        commit_message:
            description: 'A custom message for the commit'
            type: string
            required: false
        rename:
            description: 'Rename the destination file'
            type: string
            required: false
        use_rsync:
            description: 'Copy files/directories using rsync instead of cp. Experimental feature, please know your use case'
            type: string
            required: false
        git_server:
            description: 'Git server host, default github.com'
            type: string
            required: false
            default: github.com
        enable_doc_sync:
            description: 'Enable doc sync step, DOC_SYNC_KEY is required in secrets'
            type: boolean
            required: true
        enable_scanoss:
            description: 'Enable scanoss step, SCANOSS_KEY is required in secrets'
            type: boolean
            required: true
        enable_jest:
            description: 'Enabled jest tests run'
            type: boolean
            required: false
            default: true
    secrets:
        DOC_SYNC_KEY:
            required: false
            description: 'Team key used to copy files to audired'
        SCANOSS_KEY:
            required: false
            description: 'Key used to authenticate to scanoss for open source checks'

jobs:
    # doc_sync:
    #     runs-on: ubuntu-latest
    #     if: ${{ inputs.enable_doc_sync }}
    #     steps:
    #     - name: Check if branch exists
    #       id: check_branch
    #       shell: bash
    #       run: |
    #         BRANCH_NAME="${{ inputs.destination_branch }}"
    #         DESTINATION_REPO="${{ inputs.destination_repo }}"
    #         API_URL="https://api.github.com/repos/${DESTINATION_REPO}/branches/${BRANCH_NAME}"

    #         # Query the GitHub API
    #         response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.DOC_SYNC_KEY }}" "$API_URL")

    #         if [ "$response" -eq 200 ]; then
    #             echo "Branch '${BRANCH_NAME}' exists."
    #             echo "branch_exists=true" >> $GITHUB_OUTPUT
    #         else
    #             echo "Branch '${BRANCH_NAME}' does not exist."
    #             echo "branch_exists=false" >> $GITHUB_OUTPUT
    #         fi

    #     - name: Checkout
    #       uses: actions/checkout@v2
        
    #     - name: Eslint check for Docusaurus build compatibility
    #       run: npx docusaurus-mdx-checker

    #     - name: Pushes files from Feature App to Audi RED Portal for syndication
    #       uses: RED-Internal-Development/audred_docsync_action@main
    #       env:
    #         API_TOKEN_GITHUB: ${{ secrets.DOC_SYNC_KEY }}
    #       with:
    #         source_file: ${{ inputs.source_file }}
    #         destination_repo: ${{ inputs.destination_repo }}
    #         destination_folder: ${{ inputs.destination_folder }}
    #         destination_branch: ${{ inputs.destination_branch }}
    #         user_email: ${{ inputs.user_email }}
    #         user_name: ${{ inputs.user_name }}
    #         user_actor: ${{ github.actor }}
    #         destination_branch_exists: ${{ steps.check_branch.outputs.branch_exists }}
   
    # jest_test:
    #     runs-on: ubuntu-latest
    #     if: ${{ inputs.enable_jest }}
    #     steps:
    #         - name: Checkout repository 
    #           uses: actions/checkout@v3
            
    #         - name: Setup node
    #           uses: actions/setup-node@v4.0.2
    #           with:
    #             node-version-file: '.nvmrc'
    #             cache: yarn
    #             registry-url: https://npm.pkg.github.com
    #             always-auth: true
        
    #         - name: Install dependencies
    #           run: |
    #             yarn install --frozen-lockfile
    #             yarn install --frozen-lockfile --cwd src/api
    #           env:
    #             NODE_AUTH_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
        
    #         - name: Run Jest tests with coverage
    #           run: npx jest --coverage --coverageReporters="json-summary" --config=jest.config.js
        
    #         - name: Check coverage percentage
    #           run: |
    #             # Extract the coverage percentages for lines, statements, functions, and branches
    #             LINES=$(jq '.total.lines.pct' < ./coverage/coverage-summary.json)
    #             STATEMENTS=$(jq '.total.statements.pct' < ./coverage/coverage-summary.json)
    #             FUNCTIONS=$(jq '.total.functions.pct' < ./coverage/coverage-summary.json)
    #             BRANCHES=$(jq '.total.branches.pct' < ./coverage/coverage-summary.json)
        
    #             echo "Line coverage: $LINES%"
    #             echo "Statement coverage: $STATEMENTS%"
    #             echo "Function coverage: $FUNCTIONS%"
    #             echo "Branch coverage: $BRANCHES%"
        
    #             # Calculate the average coverage
    #             AVERAGE_COVERAGE=$(echo "($LINES + $STATEMENTS + $FUNCTIONS + $BRANCHES) / 4" | bc -l)
        
    #             echo "Average coverage: $AVERAGE_COVERAGE%"
        
    #             # Fail the job if the average coverage is below 80%
    #             if (( $(echo "$AVERAGE_COVERAGE < 80" | bc -l) )); then
    #                 echo "Average coverage is below 80%. Please raise test threshold."
    #                 #   echo "Average coverage is below 80%. Failing the job."
    #                 #   exit 1
    #             fi

    scanoss:
        runs-on: ubuntu-latest
        if: ${{ inputs.enable_scanoss }}
        outputs:
            scan_results: ${{ steps.set-scan-results-output.outputs.scan_results }}
        env:
            SCANOSS_KEY: ${{ secrets.SCANOSS_KEY }}
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Run SCANOSS Code Scan
          id: scanoss-code-scan-step
          uses: scanoss/gha-code-scan@v0.2.0
          with:
            api.key: ${{ secrets.SCANOSS_KEY }}
            api.url: https://api.scanoss.com/scan/direct
            dependencies.enabled: true
            policies.halt_on_failure: false
            policies: copyleft, undeclared
        
        - name: Add results to github environment variable
          id: set-scan-results-output
          run: |
            # Read the results.json file
            result_file="${{ steps.scanoss-code-scan-step.outputs.result-filepath }}"
            
            # Parse the JSON and extract the dependencies from the first package.json entry
            dependencies=$(jq '."package.json"[0].dependencies' "$result_file" | jq tostring)

            # Set the dependencies as a GitHub environment output
            echo "scan_results=$dependencies" >> $GITHUB_OUTPUT
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    dependency_sync:
        runs-on: ubuntu-latest
        if: always()
        needs: scanoss
        env:
            SCANOSS_RESULTS: ${{ needs.scanoss.outputs.scan_results }}
        steps:
            - name: Checkout repository 
              uses: actions/checkout@v3

            - name: Extract dependencies from package.json of local repository
              id: extract-deps
              run: |
                repo_name=$(jq -r '.name' package.json)
                dependencies=$(jq '.dependencies' package.json | jq tostring)
                devDependencies=$(jq '.devDependencies' package.json | jq tostring)
                repository=$(jq '.repository' package.json | jq tostring)
                echo "repo_name=$repo_name" >> $GITHUB_ENV
                echo "dependencies=$dependencies" >> $GITHUB_ENV
                echo "devDependencies=$devDependencies" >> $GITHUB_ENV
                echo "repository=$repository" >> $GITHUB_ENV

            - name: Checkout AudiRed Doc Sync repository 
              uses: actions/checkout@v3
              with:
                repository: ${{ inputs.destination_repo }}
                token: ${{ secrets.DOC_SYNC_KEY }}
                ref: doc-sync-queue

            - name: Update dependency_report/report.json in ${{ inputs.destination_repo }}
              run: |
                # Check if the dependency_report folder exists; if not, create it
                mkdir -p dependency_report
    
                # Check if report.json exists inside the dependency_report folder; if not, create it
                if [ ! -f dependency_report/report.json ]; then
                    echo "{}" > dependency_report/report.json
                fi
    
                # Read current report.json into a variable
                report_json=$(cat dependency_report/report.json)

                dependencies_parsed=$(echo "$dependencies" | jq fromjson)
                dev_dependencies_parsed=$(echo "$devDependencies" | jq fromjson)
                repository_parsed=$(echo "$repository" | jq fromjson)
                scan_results_parsed=[]

                if [ -z "${{ env.SCANOSS_RESULTS }}" ]; then
                    echo "No scanoss results to include"
                else
                    echo "About to parse!"
                    scan_results_parsed=$(echo ${{ env.SCANOSS_RESULTS }} | jq fromjson)
                    echo "parsed: $scan_results_parsed"
                fi
    
                # Check if the repository name is already in the report, if so update the dependencies
                if echo "$report_json" | jq -e ".\"$repo_name\"" > /dev/null; then
                    # Update the dependencies for the specific repository name
                    updated_report=$(echo "$report_json" | jq --arg repo_name "$repo_name" --argjson dependencies "$dependencies_parsed" --argjson devDependencies "$dev_dependencies_parsed" --argjson repository "$repository_parsed" --argjson scan_results "$scan_results_parsed" \
                        '.[$repo_name] = { "dependencies": $dependencies, "devDependencies": $devDependencies, "repository": $repository, "scan_results": $scan_results }')
                else
                    # Add a new entry for the repository in report.json
                    updated_report=$(echo "$report_json" | jq --arg repo_name "$repo_name" --argjson dependencies "$dependencies_parsed" --argjson devDependencies "$dev_dependencies_parsed" --argjson repository "$repository_parsed" --argjson scan_results "$scan_results_parsed" \
                        '. + {($repo_name): { "dependencies": $dependencies, "devDependencies": $devDependencies, "repository": $repository, "scan_results": $scan_results }}')
                fi
    
                # Write the updated report back to the file inside the dependency_report folder
                echo "$updated_report" > dependency_report/report.json

            - name: Commit and push changes
              run: |
                git config --global user.email ${{ inputs.user_email }}
                git config --global user.name ${{ inputs.user_name }}
                git add dependency_report/report.json
                if ! git diff-index --quiet HEAD; then
                    echo "commiting changes"
                    git commit -m "Update report.json with dependencies from ${{ inputs.destination_branch }}"
                    git push
                else
                    echo "No changes to push"
                fi