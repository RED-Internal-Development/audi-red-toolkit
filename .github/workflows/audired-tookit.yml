name: Audi RED Toolkit

on:
  workflow_call:
    inputs:
        source_file:
            description: 'Source file from the origin directory'
            required: true
            type: string
        destination_repo:
            description: 'Destination repository'
            type: string
            required: false
            default: 'RED-Internal-Development/audi-red-documentation'
        destination_folder:
            description: 'Directory to push the file to'
            type: string
            required: false
        user_email:
            description: 'Email for the git commit'
            type: string
            required: true
        user_name:
            description: 'GitHub username for the commit'
            type: string
            required: true
        user_actor:
            description: 'GitHub username that trigged the pipeline'
            type: string
            required: true
        destination_branch:
            description: 'branch to push file to, defaults to main'
            type: string
            required: false
        destination_branch_create:
            description: 'Destination branch to create for this commit'
            type: string
            required: false
        commit_message:
            description: 'A custom message for the commit'
            type: string
            required: false
        rename:
            description: 'Rename the destination file'
            type: string
            required: false
        use_rsync:
            description: 'Copy files/directories using rsync instead of cp. Experimental feature, please know your use case'
            type: string
            required: false
        git_server:
            description: 'Git server host, default github.com'
            type: string
            required: false
            default: github.com
        msiParentPageIds:
          description: 'By default we deployment all feature apps to a documentation sync parent id in msi. If you prefer to deploy elsewhere in this space, list ids'
          default: ""
          type: string
          required: false
        cloudParentPageIds:
          description: 'By default we deployment all feature apps to a documentation sync parent id in confluence cloud. If you prefer to deploy elsewhere in this space, list ids'
          default: ""
          type: string
          required: false
        enable_doc_sync:
            description: 'Enable doc sync step, DOC_SYNC_KEY is required in secrets'
            type: boolean
            required: true
        enable_scanoss:
            description: 'Enable scanoss step, SCANOSS_KEY is required in secrets'
            type: boolean
            required: true
    secrets:
        DOC_SYNC_KEY:
            required: false
            description: 'Team key used to copy files to audired'
        SCANOSS_KEY:
            required: false
            description: 'Key used to authenticate to scanoss for open source checks'

jobs:
    doc_sync:
        runs-on: ubuntu-latest
        if: ${{ always() && inputs.enable_doc_sync }}
        needs: data_sync
        steps:
          - name: Check if branch exists
            id: check_branch
            shell: bash
            run: |
              BRANCH_NAME="${{ inputs.destination_branch }}"
              DESTINATION_REPO="${{ inputs.destination_repo }}"
              API_URL="https://api.github.com/repos/${DESTINATION_REPO}/branches/${BRANCH_NAME}"

              # Query the GitHub API
              response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.DOC_SYNC_KEY }}" "$API_URL")

              if [ "$response" -eq 200 ]; then
                  echo "Branch '${BRANCH_NAME}' exists."
                  echo "branch_exists=true" >> $GITHUB_OUTPUT
              else
                  echo "Branch '${BRANCH_NAME}' does not exist."
                  echo "branch_exists=false" >> $GITHUB_OUTPUT
              fi

          - name: Checkout
            uses: actions/checkout@v2
          
          - name: Eslint check for Docusaurus build compatibility
            run: |
              cd ${{ inputs.source_file }}
              npx docusaurus-mdx-checker

          - name: Check if referenced images exist
            run: |
              find docs/ -type f \( -name "*.md" -o -name "*.mdx" \) -print0 | while IFS= read -r -d '' md_file; do
                    echo "Checking file: $md_file"
                    
                    grep -oP '!\[.*?\]\(\K(.*?)(?=\))' "$md_file" | while read -r image; do
                        image=$(echo "$image" | sed 's/[?#].*$//')
                        if [[ "$image" =~ ^https?:// ]]; then
                            echo "Skipping external image: $image"
                            continue
                        elif [[ "$image" =~ ^/ ]]; then
                            IMAGE_PATH="$GITHUB_WORKSPACE$image"
                        else
                            IMAGE_PATH="$(dirname "$md_file")/$image"
                        fi
    
                        IMAGE_PATH=$(realpath "$IMAGE_PATH")

                        if [[ ! -f "$IMAGE_PATH" ]]; then
                            echo "Image '$image' referenced in '$md_file' does not exist at '$IMAGE_PATH'."
                            exit 1
                        fi
                    done
                done

                echo "All images are properly referenced and exist!"
          
          - name: Download collection report artifact
            if: github.event.workflow_run.id != ''
            uses: actions/download-artifact@v4
            with:
              name: data-report
              path: data-report
              github-token: ${{ github.token }}
              repository: ${{ github.repository }}

          - name: Create or update project metrics with report data
            if: github.event.workflow_run.id != ''
            run: |
              FILE_PATH="${{ inputs.source_file }}/project_metrics.mdx"
              report_file="data-report/report.json"
              report_file_data=$(cat $report_file)

              if [ -z "$report_file_data" ]; then
                  echo "No report results to include, skipping"
              else
                  repo_name=$(echo "$report_file_data" | jq -r 'to_entries | .[0].key')
                  echo "REPO: $repo_name"
                  lighthouse_score=$(jq ".[\"$repo_name\"].lighthouse_score" "$report_file")
                  echo "lighthouse score: $lighthouse_score"
                  unit_test_coverage_data=$(jq ".[\"$repo_name\"].unit_test_coverage" "$report_file")
                  echo "unit test coverage: $unit_test_coverage_data"
                  e2e_test_coverage=$(jq ".[\"$repo_name\"].e2e_test_coverage" "$report_file")
                  echo "e2e test coverage: $e2e_test_coverage"

                  NEW_CONTENT="# CI Report Summary\n"
                  if [ -n "$lighthouse_score" ]  && [ "$lighthouse_score" != "null" ]; then
                    NEW_CONTENT+="- **Lighthouse Score**: $lighthouse_score / 1\n"
                  fi

                  if [ -n "$e2e_test_coverage" ] && [ "$e2e_test_coverage" != "null" ]; then
                    rounded_e2e_test_coverage=$(printf "%.0f" $e2e_test_coverage)
                    NEW_CONTENT+="- **E2E Test Coverage**: $rounded_e2e_test_coverage%\n"
                  fi

                  if [ -n "$unit_test_coverage_data" ] && [ "$unit_test_coverage_data" != "null" ]; then
                    echo "checking unit_test_coverage_data"
                    check_value() {
                      local value=$1
                      value=$(echo "$value" | awk '{print $1+0}')
                      
                      if (( $(echo "$value > 80" | bc -l) )); then
                        echo ":white_check_mark:"
                      elif (( $(echo "$value > 50" | bc -l) )); then
                        echo ":warning:"
                      else
                        echo ":x:"
                      fi
                    }
                    
                    unit_statements=$(jq ".[\"$repo_name\"].unit_test_coverage_data.statements" "$report_file")
                    unit_functions=$(jq ".[\"$repo_name\"].unit_test_coverage_data.functions" "$report_file")
                    unit_branches=$(jq ".[\"$repo_name\"].unit_test_coverage_data.branches" "$report_file")
                    unit_lines=$(jq ".[\"$repo_name\"].unit_test_coverage_data.lines" "$report_file")
                    rounded_unit_test_coverage=$(printf "%.0f" $unit_test_coverage)
                    NEW_CONTENT+="| Category | Coverage | Rating | \n
                      |-------------|------------|----------------| \n
                      | Statements | $unit_statements | $(check_value $unit_statements) | \n
                      | Functions | $unit_functions | $(check_value $unit_functions) | \n
                      | Branches | $unit_branches | $(check_value $unit_branches) | \n
                      | Lines | $unit_lines | $(check_value $unit_lines) | /n
                      | Overall | $rounded_unit_test_coverage | $(check_value $rounded_unit_test_coverage) | /n"
                  elif [ -n "$unit_test_coverage" ] && [ "$unit_test_coverage" != "null" ]; then
                    echo "rounded_unit_test_coverage"
                    rounded_unit_test_coverage=$(printf "%.0f" $unit_test_coverage)
                    NEW_CONTENT+="- **Unit Test Coverage**: $rounded_unit_test_coverage%\n"
                  fi

                  # Check if the file exists
                  if [ -f "$FILE_PATH" ]; then
                    echo "File exists. Appending content to the top of the file: $FILE_PATH"
                    echo -e "$NEW_CONTENT\n$(cat $FILE_PATH)" > $FILE_PATH
                  else
                    echo "File does not exist. Creating a new file: $FILE_PATH"
                    echo -e "$NEW_CONTENT" > $FILE_PATH
                  fi
              fi

          - name: Pushes files from Feature App to Audi RED Portal for syndication
            uses: RED-Internal-Development/audred_docsync_action@main
            env:
              API_TOKEN_GITHUB: ${{ secrets.DOC_SYNC_KEY }}
            with:
              source_file: ${{ inputs.source_file }}
              destination_repo: ${{ inputs.destination_repo }}
              destination_folder: ${{ inputs.destination_folder }}
              destination_branch: ${{ inputs.destination_branch }}
              user_email: ${{ inputs.user_email }}
              user_name: ${{ inputs.user_name }}
              user_actor: ${{ github.actor }}
              use_rsync: true
              destination_branch_exists: ${{ steps.check_branch.outputs.branch_exists }}

    scanoss:
        runs-on: ubuntu-latest
        if: ${{ inputs.enable_scanoss }}
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Run SCANOSS Code Scan
          id: scanoss-code-scan-step
          uses: scanoss/gha-code-scan@v0.2.0
          with:
            api.key: ${{ secrets.SCANOSS_KEY }}
            api.url: https://api.scanoss.com/scan/direct
            dependencies.enabled: true
            policies.halt_on_failure: false
            policies: copyleft, undeclared
          
        - name: Upload scanoss report
          if: ${{ steps.scanoss-code-scan-step.outputs.result-filepath }}
          uses: actions/upload-artifact@v4
          with:
            name: scanoss-report
            path: ${{ steps.scanoss-code-scan-step.outputs.result-filepath }}

    data_sync:
        runs-on: ubuntu-latest
        if: always()
        needs: scanoss
        steps:
            - name: Checkout AudiRed Doc Sync repository
              uses: actions/checkout@v3
              with:
                repository: ${{ inputs.destination_repo }}
                token: ${{ secrets.DOC_SYNC_KEY }}
                ref: doc-sync-queue
            
            - name: Download scanoss report artifact
              if: ${{ inputs.enable_scanoss }}
              uses: actions/download-artifact@v4
              with:
                name: scanoss-report
                path: scanoss-report
            
            - name: Download collection report artifact
              if: github.event.workflow_run.id != ''
              uses: actions/download-artifact@v4
              with:
                name: audired-collection-report
                path: collection-report
                github-token: ${{ github.token }}
                repository: ${{ github.repository }}
                run-id: ${{ github.event.workflow_run.id }}

            - name: Update data/report.json in ${{ inputs.destination_repo }}
              if: github.event.workflow_run.id != ''
              id: generate-report
              run: |
                data_folder="data"
                app_name=$(basename ${{ inputs.source_file }})
                report_artifact_json=$(cat collection-report/report.json)
                repo_name=$(echo "$report_artifact_json" | jq -r 'to_entries | .[0].key')
                scanoss_results_file_path="scanoss-report/results.json"
                scanoss_enabled=false

                scanoss_target_directory="$data_folder/scanoss"
                scanoss_target_file="$scanoss_target_directory/$app_name.json"
                mkdir -p "$scanoss_target_directory"

                if [ -f "$scanoss_results_file_path" ]; then
                    scanoss_enabled=true
                    cp -f "$scanoss_results_file_path" "$scanoss_target_file"
                else
                    echo "No scanoss results to include"
                fi

                updated_report_artifact_json=$(echo "$report_artifact_json" | \
                  jq --arg repo_name "$repo_name" \
                  --argjson scan_results "$scanoss_enabled" \
                  '.[$repo_name].scan_results = $scan_results')
                echo "$updated_report_artifact_json" > collection-report/report.json
                report_artifact_json=$(cat collection-report/report.json)

                # Push artifact report to existing report.json
                mkdir -p "$data_folder"
    
                # Check if report.json exists inside the $data_folder folder; if not, create it
                if [ ! -f "$data_folder"/report.json ]; then
                    echo "{}" > "$data_folder"/report.json
                fi

                jq --argjson new_report "$report_artifact_json" \
                  '. * $new_report' "$data_folder"/report.json > tmp_report.json
                
                mv tmp_report.json "$data_folder"/report.json

            - name: Upload final report
              if: github.event.workflow_run.id != ''
              uses: actions/upload-artifact@v4
              with:
                name: data-report
                path: collection-report/report.json
            
            - name: Create Repo Configuration File for MSI/Cloud Deployments
              run: |
                app_name=$(basename ${{ inputs.source_file }})
                team_folder_name=$(basename ${{ inputs.destination_folder }})
                msi_parent_page_ids="${{ inputs.msiParentPageIds }}"
                cloud_parent_page_ids="${{ inputs.cloudParentPageIds }}"
                config_file="deployment/repo_configs/$app_name.json"

                mkdir -p "$(dirname "$config_file")"

                if [[ -z "$msi_parent_page_ids" && -z "$cloud_parent_page_ids" ]]; then
                  if [[ -f "$config_file" ]]; then
                    rm "$config_file"
                  fi
                else
                  echo '{}' > "$config_file"
                  msi_jq_string=""
                  if [[ -n "$msi_parent_page_ids" ]]; then
                    msi_array=$(echo "$msi_parent_page_ids" | tr ',' '\n' | jq -R . | jq -s .)
                    msi_jq_string=".msi_parent_page_ids = $msi_array | "
                  fi

                  if [[ -n "$cloud_parent_page_ids" ]]; then
                    cloud_array=$(echo "$cloud_parent_page_ids" | tr ',' '\n' | jq -R . | jq -s .)
                    cloud_jq_string=".cloud_parent_page_ids = $cloud_array | "
                  fi
                  
                  jq "$msi_jq_string$cloud_jq_string.team_folder = \"$team_folder_name\" | .app_name = \"$app_name\"" "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"
                  echo "config file:"
                  cat "$config_file"
                fi

            - name: Commit and push changes
              run: |
                git config --global user.email ${{ inputs.user_email }}
                git config --global user.name ${{ inputs.user_name }}
                git add data/report.json
                if [[ -n "${{ github.event.workflow_run.id }}" ]]; then
                  git add data/scanoss/
                fi
                git add deployment/
                if ! git diff-index --quiet HEAD; then
                    echo "commiting changes"
                    git commit -m "Update report.json and deployment config from ${{ inputs.destination_branch }}"
                    git push
                else
                    echo "No changes to push"
                fi