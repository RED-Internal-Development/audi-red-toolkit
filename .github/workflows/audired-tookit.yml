name: Audi RED Toolkit

on:
  workflow_call:
    inputs:
        source_file:
            description: 'Source file from the origin directory'
            required: true
            type: string
        destination_repo:
            description: 'Destination repository'
            type: string
            required: false
            default: 'RED-Internal-Development/audi-red-documentation'
        destination_folder:
            description: 'Directory to push the file to'
            type: string
            required: false
        user_email:
            description: 'Email for the git commit'
            type: string
            required: true
        user_name:
            description: 'GitHub username for the commit'
            type: string
            required: true
        user_actor:
            description: 'GitHub username that trigged the pipeline'
            type: string
            required: true
        destination_branch:
            description: 'branch to push file to, defaults to main'
            type: string
            required: false
        destination_branch_create:
            description: 'Destination branch to create for this commit'
            type: string
            required: false
        commit_message:
            description: 'A custom message for the commit'
            type: string
            required: false
        rename:
            description: 'Rename the destination file'
            type: string
            required: false
        use_rsync:
            description: 'Copy files/directories using rsync instead of cp. Experimental feature, please know your use case'
            type: string
            required: false
        git_server:
            description: 'Git server host, default github.com'
            type: string
            required: false
            default: github.com
        enable_doc_sync:
            description: 'Enable doc sync step, DOC_SYNC_KEY is required in secrets'
            type: boolean
            required: true
        enable_scanoss:
            description: 'Enable scanoss step, SCANOSS_KEY is required in secrets'
            type: boolean
            required: true
    secrets:
        DOC_SYNC_KEY:
            required: false
            description: 'Team key used to copy files to audired'
        SCANOSS_KEY:
            required: false
            description: 'Key used to authenticate to scanoss for open source checks'

jobs:
    doc_sync:
        runs-on: ubuntu-latest
        if: ${{ always() && inputs.enable_doc_sync }}
        needs: data_sync
        steps:
        - name: Check if branch exists
          id: check_branch
          shell: bash
          run: |
            BRANCH_NAME="${{ inputs.destination_branch }}"
            DESTINATION_REPO="${{ inputs.destination_repo }}"
            API_URL="https://api.github.com/repos/${DESTINATION_REPO}/branches/${BRANCH_NAME}"

            # Query the GitHub API
            response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.DOC_SYNC_KEY }}" "$API_URL")

            if [ "$response" -eq 200 ]; then
                echo "Branch '${BRANCH_NAME}' exists."
                echo "branch_exists=true" >> $GITHUB_OUTPUT
            else
                echo "Branch '${BRANCH_NAME}' does not exist."
                echo "branch_exists=false" >> $GITHUB_OUTPUT
            fi

        - name: Checkout
          uses: actions/checkout@v2
        
        - name: Eslint check for Docusaurus build compatibility
          run: |
            cd ${{ inputs.source_file }}
            npx docusaurus-mdx-checker
        
        - name: Download lighthouse report artifact
          # if: github.event.workflow_run.id != ''
          uses: actions/download-artifact@v4
          with:
            name: data-report
            path: data-report
            github-token: ${{ github.token }}
            repository: ${{ github.repository }}

        - name: Create or Update Project Summary with report data
          # if: github.event.workflow_run.id != ''
          run: |
            FILE_PATH="${{ inputs.source_file }}/project_information.mdx"
            report_file="data-report/report.json"
            report_file_data=$(cat $report_file)

            if [ -z "$report_file_data" ]; then
                echo "No report results to include, skipping"
            else
                echo $report_file_data
                lighthouse_score=$(jq '.lighthouse_score' "$report_file")
                echo $lighthouse_score
                unit_test_coverage=$(jq '.unit_test_coverage' "$report_file")
                echo $unit_test_coverage
                e2e_test_coverage=$(jq '.e2e_test_coverage' "$report_file")
                echo $e2e_test_coverage

                NEW_CONTENT="# CI Report Summary\n"
                if [ -n "$lighthouse_score" ]; then
                  NEW_CONTENT+="- **Lighthouse Score**: $lighthouse_score"
                fi
                if [ -n "$unit_test_coverage" ]; then
                  NEW_CONTENT+="- **Unit Test Coverage**: $unit_test_coverage"
                fi
                if [ -n "$e2e_test_coverage" ]; then
                  NEW_CONTENT+="- **E2E Test Coverage**: $e2e_test_coverage"
                fi

                # Check if the file exists
                if [ -f "$FILE_PATH" ]; then
                  echo "File exists. Appending content to the top of the file: $FILE_PATH"
                  echo -e "$NEW_CONTENT\n$(cat $FILE_PATH)" > $FILE_PATH
                else
                  echo "File does not exist. Creating a new file: $FILE_PATH"
                  echo -e "$NEW_CONTENT" > $FILE_PATH
                fi
            fi

        - name: Pushes files from Feature App to Audi RED Portal for syndication
          uses: RED-Internal-Development/audred_docsync_action@main
          env:
            API_TOKEN_GITHUB: ${{ secrets.DOC_SYNC_KEY }}
          with:
            source_file: ${{ inputs.source_file }}
            destination_repo: ${{ inputs.destination_repo }}
            destination_folder: ${{ inputs.destination_folder }}
            destination_branch: ${{ inputs.destination_branch }}
            user_email: ${{ inputs.user_email }}
            user_name: ${{ inputs.user_name }}
            user_actor: ${{ github.actor }}
            use_rsync: true
            destination_branch_exists: ${{ steps.check_branch.outputs.branch_exists }}

    scanoss:
        runs-on: ubuntu-latest
        if: ${{ inputs.enable_scanoss }}
        outputs:
            scan_results: ${{ steps.set-scan-results-output.outputs.scan_results }}
        env:
            SCANOSS_KEY: ${{ secrets.SCANOSS_KEY }}
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Run SCANOSS Code Scan
          id: scanoss-code-scan-step
          uses: scanoss/gha-code-scan@v0.2.0
          with:
            api.key: ${{ secrets.SCANOSS_KEY }}
            api.url: https://api.scanoss.com/scan/direct
            dependencies.enabled: true
            policies.halt_on_failure: false
            policies: copyleft, undeclared
        
        - name: Add results to github environment variable
          id: set-scan-results-output
          run: |
            # Read the results.json file
            result_file="${{ steps.scanoss-code-scan-step.outputs.result-filepath }}"
            
            # Parse the JSON and extract the dependencies from the first package.json entry
            dependencies=$(jq '."package.json"[0].dependencies' "$result_file" | jq tostring)

            # Set the dependencies as a GitHub environment output
            echo "scan_results=$dependencies" >> $GITHUB_OUTPUT
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    data_sync:
        runs-on: ubuntu-latest
        # if: ${{ always() && github.event.workflow_run.id != '' }}
        if: always()
        needs: scanoss
        env:
          SCANOSS_RESULTS: ${{ needs.scanoss.outputs.scan_results }}
        outputs:
          report_data: ${{ steps.generate-report.outputs.report_data }}
        steps:
            - name: Checkout AudiRed Doc Sync repository
              uses: actions/checkout@v3
              with:
                repository: ${{ inputs.destination_repo }}
                token: ${{ secrets.DOC_SYNC_KEY }}
                ref: doc-sync-queue
            
            - name: Download collection report artifact
              uses: actions/download-artifact@v4
              with:
                name: audired-collection-report
                path: collection-report
                github-token: ${{ github.token }}
                repository: ${{ github.repository }}
                # run-id: ${{ github.event.workflow_run.id }}

            - name: Update dependency_report/report.json in ${{ inputs.destination_repo }}
              id: generate-report
              run: |
                # Artifact update
                report_artifact_json=$(cat collection-report/report.json)
                repo_name=$(echo "$report_artifact_json" | jq -r 'to_entries | .[0].key')

                scan_results_parsed=[]
                if [ -z "$SCANOSS_RESULTS" ]; then
                    echo "No scanoss results to include"
                else
                    scan_results_parsed=$(echo "$SCANOSS_RESULTS" | jq fromjson)
                    updated_report_artifact_json=$(echo "$report_artifact_json" | \
                      jq --arg repo_name "$repo_name" \
                      --argjson scan_results "$scan_results_parsed" \
                      '.[$repo_name].scan_results = $scan_results')
                    echo "$updated_report_artifact_json" > collection-report/report.json
                    report_artifact_json=$(cat collection-report/report.json)
                fi

                # Push artifact report to existing report.json
                mkdir -p dependency_report
    
                # Check if report.json exists inside the dependency_report folder; if not, create it
                if [ ! -f dependency_report/report.json ]; then
                    echo "{}" > dependency_report/report.json
                fi

                jq --argjson new_report "$report_artifact_json" \
                  '. * $new_report' dependency_report/report.json > tmp_report.json
                
                mv tmp_report.json dependency_report/report.json

            - name: Upload final report
              uses: actions/upload-artifact@v4
              with:
                name: data-report
                path: dependency_report/report.json

            - name: Commit and push changes
              run: |
                git config --global user.email ${{ inputs.user_email }}
                git config --global user.name ${{ inputs.user_name }}
                git add dependency_report/report.json
                if ! git diff-index --quiet HEAD; then
                    echo "commiting changes"
                    git commit -m "Update report.json with dependencies from ${{ inputs.destination_branch }}"
                    git push
                else
                    echo "No changes to push"
                fi